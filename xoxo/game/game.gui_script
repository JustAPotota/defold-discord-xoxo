local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local xoxo = require "xoxo.xoxo"

local TEXTURE1_ID = "player1_photo"
local TEXTURE2_ID = "player2_photo"


local function index_to_row_column(index)
	local row = math.ceil(index / 3)
	local column = 1 + ((index - 1) % 3)
	return row, column
end

local function update_message(text)
	gui.set_text(gui.get_node("message"), text)
end


local function refresh_player(player, photo_node, name_node, texture_id)
	gui.set_text(name_node, player and player.name or "")

	if player and player.photo and player.photo ~= "" then
		http.request(player.photo .. "&ignore=" .. os.time(), "GET", function(self, id, response)
			if response.status == 200 then
				local img = image.load(response.response)
				gui.set_texture_data(texture_id, img.width, img.height, "rgb", img.buffer, false)
				gui.set_enabled(photo_node, true)
			end
		end)
	end
end


local function show_players(game, player, opponent)
	if game.players[1] == player.id then
		refresh_player(opponent, gui.get_node("player1_photo"), gui.get_node("player1_name"), TEXTURE1_ID)
		refresh_player(player, gui.get_node("player2_photo"), gui.get_node("player2_name"), TEXTURE2_ID)
	else
		refresh_player(player, gui.get_node("player1_photo"), gui.get_node("player1_name"), TEXTURE1_ID)
		refresh_player(opponent, gui.get_node("player2_photo"), gui.get_node("player2_name"), TEXTURE2_ID)
	end
end


local function update_cells(game)
	for i=1,9 do
		local row, column = index_to_row_column(i)
		local pidx = game.cells[row][column]
		local url = msg.url(nil, "cell" .. i, "symbol")
		local node = gui.get_node("cell" .. i)
		if pidx == 1 then
			gui.set_enabled(node, true)
			gui.play_flipbook(node, hash("x"))
		elseif pidx == 2 then
			gui.set_enabled(node, true)
			gui.play_flipbook(node, hash("o"))
		else
			gui.set_enabled(node, false)
		end
	end
end


local function show_rematch()
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("rematch/bg"), true)
end


local function update_game(game, player, opponent)
	update_cells(game)
	if game.winner then
		update_message("You won!")
		show_rematch()
	elseif game.draw then
		update_message("Draw!")
		show_rematch()
	elseif (game.players[game.player_turn].id == player.id) then
		msg.post(".", "acquire_input_focus")
		update_message("Your turn")
	else
		update_message("Wait your turn")
	end
end

local function play_in_cell(self, index)
	msg.post(".", "release_input_focus")
	update_message("Sending your move")

	local row, column = index_to_row_column(index)
	xoxo.player_move(row, column, function(game, player, opponent)
		update_game(game, player, opponent)
	end)
end



local function reset_cells(self)
	self.cells = {}
	for i=1,9 do
		self.cells[i] = gui.get_node("cell" .. i)
		gui.set_enabled(self.cells[i], false)
	end
end

function init(self)
	gui.set_render_order(15)

	local data = monarch.data(hash("game"))

	local ok = gui.new_texture(TEXTURE1_ID, 120, 120, "rgb", (string.char(0xff) .. string.char(0x80) .. string.char(0x10)):rep(120*120), false)
	if not ok then
		print("Unable to create player1 texture")
	end
	local ok = gui.new_texture(TEXTURE2_ID, 120, 120, "rgb", (string.char(0xff) .. string.char(0x80) .. string.char(0x10)):rep(120*120), false)
	if not ok then
		print("Unable to create player2 texture")
	end
	local player1_photo = gui.get_node("player1_photo")
	local player2_photo = gui.get_node("player2_photo")
	gui.set_texture(player1_photo, TEXTURE1_ID)
	gui.set_enabled(player1_photo, false)
	gui.set_texture(player2_photo, TEXTURE2_ID)
	gui.set_enabled(player2_photo, false)
	gui.set_enabled(gui.get_node("rematch/bg"), false)

	update_message("")
	
	xoxo.load_game(function(game, player, opponent)
		reset_cells(self)
		update_game(game, player, opponent)
		show_players(game, player, opponent)
	end)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") and message.group == hash("cell") then
		if message.enter then
			self.over_cell = message.other_id
		elseif self.over_cell == message.other_id then
			self.over_cell = nil
		end
	end
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		for i=1,9 do
			local cell = self.cells[i]
			if cell and gui.pick_node(cell, action.x, action.y) then
				self.cells[i] = nil
				play_in_cell(self, i)
				return true
			end
		end
	end
	gooey.button("rematch/bg", action_id, action, function()
		gui.set_enabled(gui.get_node("rematch/bg"), false)
		msg.post(".", "release_input_focus")
		xoxo.request_rematch(function(game, player, opponent)
			if game then
				reset_cells(self)
				update_game(game, player, opponent)
				show_players(game, player, opponent)
			end
		end)
	end)
end
